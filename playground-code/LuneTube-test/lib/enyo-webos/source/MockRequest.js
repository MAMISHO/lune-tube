(function (enyo, scope) {

	/**
	* An mock version of {@link enyo.ServiceRequest} designed for webOS service request simulation.
	*
	* It will read json mock results from a file and return the results in a manner similar to real service requests.
	*
	* For example, a call to service `palm://com.palm.systemservice/time` with method
	* `getSystemTime` would automatically try to read the file
	* `mock/com.palm.systemservice/time/getSystemTime.json`. Alternatively, the
	* {@link enyo.MockRequest#mockFile} property can be set to specify a specific json file to read.
	*
	* @class enyo.MockRequest
	* @extends enyo.Ajax
	* @public
	*/
	enyo.kind(
		/** @lends enyo.MockRequest.prototype */ {

		/**
		* @private
		*/
		name: 'enyo.MockRequest',

		/**
		* @private
		*/
		kind: 'enyo.Ajax',

		/**
		* @private
		*/
		mimeType: 'application/json',

		/**
		* @lends enyo.MockRequest.prototype
		* @private
		*/
		published: {
			/**
			* Palm service URI.  Starts with palm:// and will be used to create the autogenerated
			* mock filepath directory
			*
			* @type {String}
			* @default ''
			* @public
			*/
			service: '',

			/**
			* Service method and will be used to create the autogenerated mock filename (with
			* '.json' appended)
			*
			* @type {String}
			* @default ''
			* @public
			*/
			method: '',

			/**
			* Optionally specify the json file to read for mock results, rather than the specifying
			* service and method
			*
			* @type {String}
			* @default `undefined`
			* @public
			*/
			mockFile: undefined
		},

		/**
		* @public
		*/
		go: function() {
			if(this.mockFile) {
				this.url = this.mockFile;
			} else {
				this.url = this.service;
				var i = this.url.indexOf('://');
				if(i>-1) {
					this.url = this.url.substring(i+3);
				}
				this.url = 'mock/' + this.url;
				if(this.method && this.method.length>0) {
					if(this.url.charAt(this.url.length-1) != '/') {
						this.url += '/';
					}
					this.url += this.method;
				}
				this.url += '.json';
			}
			var serviceMethod = this.method;
			this.method = 'GET';
			var request = this.inherited(arguments);
			this.method = serviceMethod;
			return request;
		},

		/**
		* @public
		*/
		cancel: function() {
			if(this.xhr) {
				enyo.xhr.cancel(this.xhr);
				this.endTimer();
				this.xhr = null;
			}
		},

		/**
		* @private
		*/
		respond: function(value) {
			if(value.errorCode || value.returnValue === false) {
				this.fail(value);
			} else {
				this.inherited(arguments);
			}
		}
	});

})(enyo, this);